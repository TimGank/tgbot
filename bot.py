import logging
from datetime import datetime, timezone
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    CallbackContext
)
from api.kudago import fetch_kudago_events
from config import TELEGRAM_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_CITY, SELECT_CATEGORY, SELECT_EVENT = range(3)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π
CATEGORIES = {
    "üéµ –ö–æ–Ω—Ü–µ—Ä—Ç—ã": "concert",
    "üé≠ –¢–µ–∞—Ç—Ä—ã": "theater",
    "üñº –í—ã—Å—Ç–∞–≤–∫–∏": "exhibition",
    "üé™ –§–µ—Å—Ç–∏–≤–∞–ª–∏": "festival"
}

# –ì–æ—Ä–æ–¥–∞
CITIES = {
    "–ú–æ—Å–∫–≤–∞": "msk",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "spb",
    "–ö–∞–∑–∞–Ω—å": "kzn"
}


def get_back_button():
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'"""
    return [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]


def shorten_text(text, max_length=25):
    """–°–æ–∫—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
    if len(text) > max_length:
        return text[:max_length - 3] + "..."
    return text


async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=ReplyKeyboardMarkup(
            [[city] for city in CITIES.keys()],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return SELECT_CITY


async def select_city(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    city = update.message.text
    if city not in CITIES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_CITY

    context.user_data['city'] = city
    context.user_data['current_state'] = SELECT_CATEGORY
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π:",
        reply_markup=ReplyKeyboardMarkup(
            [[cat] for cat in CATEGORIES.keys()],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return SELECT_CATEGORY


async def select_category(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = update.message.text
    if category not in CATEGORIES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return SELECT_CATEGORY

    context.user_data['category'] = category
    context.user_data['current_state'] = SELECT_EVENT
    city = CITIES[context.user_data['city']]
    events = fetch_kudago_events(city, CATEGORIES[category])

    if not events:
        await update.message.reply_text("üòî –°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return SELECT_CATEGORY

    context.user_data['events'] = events[:10]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ 10 —Å–æ–±—ã—Ç–∏–π

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å–æ–±—ã—Ç–∏–π (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏)
    buttons = [
        [InlineKeyboardButton(
            f"{shorten_text(event['title'])}",
            callback_data=str(idx)
        )]
        for idx, event in enumerate(events[:10])
    ]
    buttons.append(get_back_button())

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return SELECT_EVENT


async def show_event(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        return await back_handler(update, context)

    event_idx = int(query.data)
    event = context.user_data['events'][event_idx]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_str = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    if event.get('dates') and isinstance(event['dates'][0], dict):
        try:
            timestamp = event['dates'][0].get('start')
            if timestamp:
                dt = datetime.fromtimestamp(timestamp, tz=timezone.utc).replace(tzinfo=None)
                months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                          '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
                date_str = f"{dt.day} {months[dt.month - 1]} {dt.year}, {dt.hour}:{dt.minute:02d}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
            date_str = f"–°–∫–æ—Ä–æ ({timestamp})"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üé§ *{event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n\n"

    if event.get('place'):
        text += f"üè† *–ú–µ—Å—Ç–æ:* {event['place'].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

    text += f"üìÖ *–î–∞—Ç–∞:* {date_str}\n"

    if event.get('price'):
        text += f"üíµ *–¶–µ–Ω–∞:* {event['price']}\n"

    if event.get('description'):
        text += f"\n‚ÑπÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{event['description'][:300]}...\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    if event.get('site_url'):
        buttons.append([InlineKeyboardButton("üéüÔ∏è –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", url=event['site_url'])])

    """–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    buttons.append(get_back_button())

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )
    return SELECT_EVENT


async def back_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    query = update.callback_query
    await query.answer()

    current_state = context.user_data.get('current_state', SELECT_CITY)

    if current_state == SELECT_EVENT:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π:",
            reply_markup=ReplyKeyboardMarkup(
                [[cat] for cat in CATEGORIES.keys()],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        await query.message.delete()
        return SELECT_CATEGORY
    elif current_state == SELECT_CATEGORY:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=ReplyKeyboardMarkup(
                [[city] for city in CITIES.keys()],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        await query.message.delete()
        return SELECT_CITY


async def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    )
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_city)
            ],
            SELECT_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_category)
            ],
            SELECT_EVENT: [
                CallbackQueryHandler(show_event),
                CallbackQueryHandler(back_handler, pattern="^back$")
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext
)
import requests
from config import TELEGRAM_TOKEN  # –°–æ–∑–¥–∞–π—Ç–µ config.py —Å —Ç–æ–∫–µ–Ω–æ–º
from database.crud import get_user, update_user_city
from api.event_providers import get_events
from api.maps import generate_map_link

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CITY, COMMAND = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


def get_events_from_api(city, category):
    response = requests.post(
        'http://localhost:5000/api/events',
        json={'city': city, 'category': category}
    )
    return response.json()


async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –∏—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è:"
    )
    return CITY


async def set_city(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É"""
    city = update.message.text
    context.user_data['city'] = city

    reply_keyboard = [["–ö–æ–Ω—Ü–µ—Ä—Ç—ã", "–í—ã—Å—Ç–∞–≤–∫–∏", "–§–µ—Å—Ç–∏–≤–∞–ª–∏"]]
    await update.message.reply_text(
        "–ß—Ç–æ –∏—â–µ–º?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return COMMAND


async def find_events(update: Update, context: CallbackContext):
    """–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    category = update.message.text.lower()
    city = context.user_data.get('city')

    if not city:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥!")
        return CITY

    try:
        events = get_events_from_api(city=city, category=category)
        if not events:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")
            return COMMAND

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        event = events[0]
        text = (
            f"üé§ {event['title']}\n"
            f"üìç {event['place']['name']}\n"
            f"üìÖ {event['dates'][0]}\n"
            f"üíµ {event.get('price', '?')} —Ä—É–±."
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        map_url = generate_map_link([event])

        await update.message.reply_photo(
            photo=map_url,
            caption=text
        )

    except Exception as e:
        logging.error(f"Error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    return COMMAND


async def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_city)],
            COMMAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, find_events)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()
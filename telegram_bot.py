import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext
)
import pprint

from api.gpt4free.gpt import DialogGPT
from api.kudago import fetch_kudago_events
from config import TELEGRAM_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CITY, CATEGORY = range(2)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π
CATEGORIES = {
    "üéµ –ö–æ–Ω—Ü–µ—Ä—Ç—ã": "concert",
    "üé≠ –¢–µ–∞—Ç—Ä—ã": "theater",
    "üñº –í—ã—Å—Ç–∞–≤–∫–∏": "exhibition",
    "üé™ –§–µ—Å—Ç–∏–≤–∞–ª–∏": "festival",
    "üé¨ –ö–∏–Ω–æ": "cinema",
    "üçπ –í–µ—á–µ—Ä–∏–Ω–∫–∏": "party",
    "üë∂ –î–µ—Ç—è–º": "kids"
}

# –ú–∞–ø–ø–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤
CITY_MAPPING = {
    "–ú–æ—Å–∫–≤–∞": "msk",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "spb",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "nsk",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "ekb",
    "–ö–∞–∑–∞–Ω—å": "kzn"
}


class EventBot:
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
    CITY, CATEGORY = range(2)

    def __init__(self, token: str):
        self.TELEGRAM_TOKEN = token
        self.logger = self._setup_logging()

        self.gptPrompt = None
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.CATEGORIES = {
            "üéµ –ö–æ–Ω—Ü–µ—Ä—Ç—ã": "concert",
            "üé≠ –¢–µ–∞—Ç—Ä—ã": "theater",
            "üñº –í—ã—Å—Ç–∞–≤–∫–∏": "exhibition",
            "üé™ –§–µ—Å—Ç–∏–≤–∞–ª–∏": "festival",
            "üé¨ –ö–∏–Ω–æ": "cinema",
            "üçπ –í–µ—á–µ—Ä–∏–Ω–∫–∏": "party",
            "üë∂ –î–µ—Ç—è–º": "kids"
        }

        self.CITY_MAPPING = {
            "–ú–æ—Å–∫–≤–∞": "msk",
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "spb",
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "nsk",
            "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "ekb",
            "–ö–∞–∑–∞–Ω—å": "kzn"
        }

    @staticmethod
    def _setup_logging():
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )
        return logging.getLogger(__name__)

    async def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user

        self.gptPrompt = DialogGPT(update.effective_chat.id)

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=ReplyKeyboardMarkup(
                [[city] for city in self.CITY_MAPPING.keys()],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return self.CITY

    async def select_city(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
        city = update.message.text
        if city not in self.CITY_MAPPING:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return self.CITY

        context.user_data['city'] = city
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π:",
            reply_markup=ReplyKeyboardMarkup(
                [[category] for category in self.CATEGORIES.keys()],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return self.CATEGORY

    async def show_events(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_name = update.message.text
        if category_name not in self.CATEGORIES:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return self.CATEGORY

        city = context.user_data.get('city')
        category = self.CATEGORIES[category_name]

        await update.message.reply_text(f"üîç –ò—â—É {category_name.lower()} –≤ {city}...")

        try:
            events = fetch_kudago_events(
                city=self.CITY_MAPPING[city],
                category=category,
                page_size=5
            )

            if not events:
                await update.message.reply_text("üòî –°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
                return self.CATEGORY

            for event in events:
                description = f"üé§ *{event['title']}*\n\n"

                if 'place' in event and event['place']:
                    description += f"üè† *–ú–µ—Å—Ç–æ:* {event['place']['id']}\n"
                    if 'address' in event['place']:
                        description += f"üìç *–ê–¥—Ä–µ—Å:* {event['place']['address']}\n"

                if 'dates' in event and event['dates']:
                    description += f"üìÖ *–î–∞—Ç–∞:* {event['dates'][0]}\n"

                if 'price' in event and event['price']:
                    description += f"üíµ *–¶–µ–Ω–∞:* {event['price']}\n"

                keyboard = []
                if 'site_url' in event:
                    keyboard.append([InlineKeyboardButton("üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=event['site_url'])])

                await update.message.reply_text(
                    description,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )

        except Exception as e:
            self.logger.error(f"Error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        return self.CATEGORY

    async def cancel(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
        await update.message.reply_text(
            "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        )
        return ConversationHandler.END

    async def error_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.logger.error(f"Update {update} caused error {context.error}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def gpt_talk(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GPT-–¥–∏–∞–ª–æ–≥–∞"""
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=ChatAction.TYPING
        )
        try:
            answer = await self.gptPrompt.createDialog(update.message.text)
            print(answer + "0")
            await update.message.reply_text(answer)
        except TypeError:
            await self.error_handler()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = ApplicationBuilder().token(self.TELEGRAM_TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                self.CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.select_city)],
                self.CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.show_events)]
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )

        application.add_handler(conv_handler)
        application.add_error_handler(self.error_handler)
        application.add_handler(MessageHandler(filters.TEXT, self.gpt_talk))

        self.logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()


if __name__ == '__main__':
    bot = EventBot(TELEGRAM_TOKEN)
    bot.run()